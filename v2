import json
import zipfile
import os
import pandas as pd
import shutil
import re

# pip install pandas

# 解压 .xmind 文件
def extract_content_json(xmind_file, extract_to='xmind_temp'):
    with zipfile.ZipFile(xmind_file, 'r') as zip_ref:
        zip_ref.extractall(extract_to)
    return os.path.join(extract_to, 'content.json')

# 从 marker 中提取优先级
def extract_priority(topic):
    markers = topic.get('markers', [])
    for marker in markers:
        if isinstance(marker, str):
            target = marker
        elif isinstance(marker, dict) and 'markerId' in marker:
            target = marker['markerId']
        else:
            continue
        match = re.match(r'priority-(\d)', target)
        if match:
            return match.group(1)
    return ''

# 递归解析节点，路径中每一层记录标题和优先级，并计算优先级所在层级
def parse_topic(topic, path=None, result=None):
    if path is None:
        path = []
    if result is None:
        result = []

    title = topic.get('title', '')
    note = topic.get('notes', {}).get('plain', {}).get('content', '')
    priority = extract_priority(topic)
    current_path = path + [{'title': title, 'priority': priority}]

    # 如果是叶子节点，记录完整路径、备注和优先级层级
    if not topic.get('children', {}).get('attached'):
        priority_levels = [i + 1 for i, node in enumerate(current_path) if node.get('priority')]

        if len(priority_levels) == 0:
            raise ValueError(f"❌ 缺失优先级标记：{' - '.join(n['title'] for n in current_path)}")

        if len(priority_levels) > 1:
            raise ValueError(f"❌ 存在多个优先级标记：{' - '.join(n['title'] for n in current_path)}")

        priority_level = priority_levels[0]
        path_len = len(current_path)

        # ✅ 自动判断 步骤 和 预期
        step = ''
        expect = ''
        if path_len == priority_level + 1:
            expect = current_path[priority_level]['title']
        elif path_len == priority_level + 2:
            step = current_path[priority_level]['title']
            expect = current_path[priority_level + 1]['title']
        elif path_len > priority_level + 2:
            raise ValueError(f"❌ 优先级后层级过多（最多两层）：{' - '.join(n['title'] for n in current_path)}")
        priority_value = current_path[priority_level - 1]['priority']

        result.append({
            'path': current_path,
            'note': note,
            'priority_level': priority_level,
            '步骤': step,
            '预期': expect,
            '优先级值': priority_value  # ✅ 新增字段
        })

    else:
        for child in topic['children']['attached']:
            parse_topic(child, current_path, result)

    return result




# 根据映射配置生成 CSV 每一行
def map_to_columns(parsed_data, column_mapping):
    rows = []
    for item in parsed_data:
        row = {}
        path = item['path']
        note = item['note']
        priority_level = item['priority_level']  # 优先级所在层级（从1开始）

        for col_name, config in column_mapping.items():
            if isinstance(config, dict):
                if 'value' in config:
                    # 固定值
                    row[col_name] = config['value']
                elif 'level' in config:
                    level_cfg = config['level']
                    if isinstance(level_cfg, list) and len(level_cfg) == 2:
                        # 处理区间：[起始层级, 结束层级]，结束层级可以为 'priority'
                        start_level = level_cfg[0]
                        end_level = level_cfg[1]
                        if end_level == 'priority':
                            end_level = priority_level
                        if not isinstance(end_level, int):
                            raise ValueError(f"❌ 配置错误：level 范围结束层级必须是整数或 'priority'")
                        titles = []
                        for i in range(start_level - 1, end_level):
                            if i < len(path):
                                titles.append(path[i]['title'])
                        row[col_name] = '-'.join(titles)
                    elif isinstance(level_cfg, int):
                        # 单一层级
                        idx = level_cfg - 1
                        if 0 <= idx < len(path):
                            node = path[idx]
                            if config.get('priority'):
                                row[col_name] = node.get('priority', '')
                            else:
                                row[col_name] = node.get('title', '')
                        else:
                            row[col_name] = ''
                    else:
                        row[col_name] = ''
                else:
                    row[col_name] = ''
            elif config == 'note':
                row[col_name] = note
            elif config == '步骤':
                row[col_name] = item.get('步骤', '')
            elif config == '预期':
                row[col_name] = item.get('预期', '')
            elif config == '优先级值':
                row[col_name] = item.get('优先级值', '')  # ✅ 优先级值直接取
            else:
                row[col_name] = ''
        rows.append(row)
    return rows


# 写入 CSV
def save_to_csv(rows, csv_file_path, column_headers):
    df = pd.DataFrame(rows, columns=column_headers)
    df.to_csv(csv_file_path, index=False, encoding='utf-8-sig')
    print(f"✅ CSV 已生成：{csv_file_path}")

# 主函数
def main():
    xmind_file = 'test_points.xmind'  # 替换为你的 XMind 文件
    csv_file = 'test_cases.csv'       # 输出的 CSV 文件
    extract_dir = 'xmind_temp'

    # ✅ 列名 → 层级配置。支持指定优先级提取
    column_mapping = {
        '所属模块': {'level': 1},
        '用例标题': {'level': [2, 'priority']},
        '前置条件': {'value': ''},
        '步骤': '步骤',
        '预期': '预期',
        '关键词': {'value': ''},
        '优先级': '优先级值',  # ✅ 自动映射，无需配置层级
        '用例类型': {'value': '功能测试'},
        '适用阶段': {'value': '功能测试阶段'},
    }

    column_headers = list(column_mapping.keys())

    # 解压读取
    content_json_path = extract_content_json(xmind_file, extract_dir)
    with open(content_json_path, 'r', encoding='utf-8') as f:
        content = json.load(f)

    # 解析所有 sheet
    all_data = []
    for sheet in content:
        root_topic = sheet.get('rootTopic')
        if root_topic:
            all_data.extend(parse_topic(root_topic))

    # 映射 & 导出
    mapped_rows = map_to_columns(all_data, column_mapping)
    save_to_csv(mapped_rows, csv_file, column_headers)

    shutil.rmtree(extract_dir)

if __name__ == '__main__':
    main()
